<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonSpanParser</name>
    </assembly>
    <members>
        <member name="T:SpanParser.Json.JArrayNode">
            <summary>
            an internal object describing a  json-array. Use JSpan for parsing
            </summary>
        </member>
        <member name="T:SpanParser.Json.JObjectNode">
            <summary>
            an internal object describing a  json-object. Use JSpan for parsing
            </summary>
        </member>
        <member name="T:SpanParser.Json.JsonMemoryContext">
            <summary>
            basic IMemoryContext implementation
            </summary>
        </member>
        <member name="P:SpanParser.Json.JsonMemoryContext.ObjectRefMemory">
            <summary>
            memory access for storing objects
            </summary>
        </member>
        <member name="P:SpanParser.Json.JsonMemoryContext.ArrayRefMemory">
            <summary>
            memory access for storing objects
            </summary>
        </member>
        <member name="M:SpanParser.Json.JsonMemoryContext.Release">
            <summary>
            in this implementation allows you to overwrite memory 
            without utilizing it and not allocating new
            </summary>
        </member>
        <member name="M:SpanParser.Json.JsonMemoryContext.Collect">
            <summary>
            in this implementation allows you to release memory
            and reset buffer to initial state
            </summary>
        </member>
        <member name="M:SpanParser.Json.JsonMemoryContext.Compress">
            <summary>
            in this implementation allows you 
            to сompress the used memory to the filled length 
            </summary>
        </member>
        <member name="T:SpanParser.Json.JSpan">
            <summary>
            Allows to parse
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpan.IsEmpty">
            <summary>
            false if Source(jsonCharSpan) is empty, otherwise true
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpan.IsArray">
            <summary>
            true if JSpan includes json array, otherwise false.
            you can get the value by index
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpan.IsObject">
            <summary>
            true if JSpan includes json object, otherwise false.
            you can get the value by key
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpan.IsValue">
            <summary>
            true if JSpan includes any value, otherwise false.
            you can get the value by ToString method
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpan.IsMaterial">
            <summary>
            true if JSpan includes true, false, null or digit, otherwise false.
            you can get the value by ToString or AsJsonString method
            </summary>
        </member>
        <member name="M:SpanParser.Json.JSpan.Parse(System.ReadOnlySpan{System.Char},SpanParser.Json.IJsonMemoryContext)">
            <summary>
            Use to parse
            </summary>
            <param name="jsonCharSpan">span incudes json object as json-string</param>
            <param name="context">required memory access</param>
            <returns>an object similar in functionality to a JObject from Newtonsoft.Json.Linq</returns>
            <exception cref="T:System.InvalidOperationException">throws if jsonCharSpan include wrong json</exception>
        </member>
        <member name="P:SpanParser.Json.JSpan.Item(System.ReadOnlySpan{System.Char})">
            <summary>
            if JSpan is json object use this method to get value by key,
            if JSpan not an json object, then the method will return an empty JSpan 
            </summary>
            <param name="key">key</param>
            <returns>value or empty JSpan if the key is not found</returns>
        </member>
        <member name="P:SpanParser.Json.JSpan.Item(System.Int32)">
            <summary>
            if JSpan is json array use this method to get value by index,
            if JSpan not an json array, then the method will return an empty JSpan 
            </summary>
            <param name="indx">index</param>
            <returns>value or empty JSpan if the key is not found</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.GetEnumerator">
            <summary>
            allows you to get an enumerator of the array contained in the JSpan 
            </summary>
            <returns>by default if JSpan does not contain an array</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.ToString">
            <summary>
            use to get the value contained in the JSpan or contained json
            </summary>
            <returns>value, json or empty string</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.ToSpan">
            <summary>
            use to get the value contained in the JSpan or contained json
            </summary>
            <returns>value, json or empty span</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.AsJsonString">
            <summary>
            use to get the value contained in the JSpan in json form
            (with opening and closing elements defining the json object)
            </summary>
            <returns>value or empty string</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.AsJsonSpan">
            <summary>
            use to get the value contained in the JSpan in json form
            (with opening and closing elements defining the json object)
            </summary>
            <returns>value or empty span</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.Deserialize``1">
            <summary>
            use to deserialize
            </summary>
            <typeparam name="T">the type to which the JSpan(json object) will be deserialized</typeparam>
            <returns>object ot T-default value</returns>
        </member>
        <member name="M:SpanParser.Json.JSpan.op_Equality(SpanParser.Json.JSpan,SpanParser.Json.JSpan)">
            <summary>
            JSpans are compared by values and by references to included ReadOnlySpan of char and IJsonMemoryContext
            </summary>
        </member>
        <member name="M:SpanParser.Json.JSpan.op_Inequality(SpanParser.Json.JSpan,SpanParser.Json.JSpan)">
            <summary>
            JSpans are compared by values and by references to included ReadOnlySpan of char and IJsonMemoryContext
            </summary>
        </member>
        <member name="T:SpanParser.Json.JSpanEnumerator">
            <summary>
            an object that provides access to a json-array, similar to an IEnumerator
            </summary>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.MoveNext">
            <summary>
            assigns the Сurrent to the next element of the enumerator 
            </summary>
            <returns>true, if there are objects in the enumerator</returns>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.MovePrevious">
            <summary>
            similar to MoveNext, 
            allows you to iterate over objects from the last to the first
            </summary>
            <returns>true, if there are objects in the enumerator</returns>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.Last">
            <summary>
            allows you to get the last element of the enumeration 
            </summary>
            <returns>default if enumeration is empty</returns>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.First">
            <summary>
            allows you to get the first element of the enumeration 
            </summary>
            <returns>default if enumeration is empty</returns>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.Count">
            <summary>
            allows you to get the length of the enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.ResetToFirst">
            <summary>
            moves the iterator to the first item. 
            </summary>
        </member>
        <member name="M:SpanParser.Json.JSpanEnumerator.ResetToLast">
            <summary>
            moves the iterator to the last item. 
            Use before using the MovePrevious
            </summary>
        </member>
        <member name="P:SpanParser.Json.JSpanEnumerator.Current">
            <summary>
            contains the current enumeration object or default of JSpan
            </summary>
        </member>
        <member name="T:SpanParser.Json.IJsonMemoryContext">
            <summary>
            implement at your discretion to provide unmanaged memory for the parser to run without allocations, 
            or use ready-made MemoryContext class 
            </summary>
        </member>
        <member name="P:SpanParser.Json.IJsonMemoryContext.ObjectRefMemory">
            <summary>
            implements the necessary memory access for storing objects
            </summary>
        </member>
        <member name="P:SpanParser.Json.IJsonMemoryContext.ArrayRefMemory">
            <summary>
             implements the necessary memory access for storing objects
            </summary>
        </member>
        <member name="T:SpanParser.IMemoryHolder`1">
            <summary>
            implements the necessary memory access
            </summary>
            <typeparam name="T">the type to be located in memory is used in IMemoryContext</typeparam>
        </member>
        <member name="M:SpanParser.IMemoryHolder`1.GetByRef(System.Int32)">
            <summary>
            Allows you to get an object from memory by reference 
            </summary>
            <param name="indx">reference</param>
            <returns>object or default</returns>
            <exception cref="T:System.IndexOutOfRangeException">When indx less then zero or bigger then length</exception>
        </member>
        <member name="M:SpanParser.IMemoryHolder`1.Add(`0)">
            <summary>
            Allows to write an object into memory and get a reference to it 
            </summary>
            <param name="value">object</param>
            <returns>reference</returns>
        </member>
    </members>
</doc>
